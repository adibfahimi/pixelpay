var searchIndex = JSON.parse('{\
"pixelpay":{"doc":"","t":"AAFAADLLLLLLMLMLLMMLMMMLMLLLLLLDMLLLMLLLMLMLLLLLAAAAADMLLLFLLLLLLFFDFMLLLLFLMLLLLLDFLLLLLLLMLLLLDMLLLLLLLLMLMMLMMLLLLLL","n":["block","blockchain","main","routes","tx","Block","borrow","borrow_mut","calculate_hash","calculate_merkle_root","clone","clone_into","data","deserialize","difficulty","fmt","from","hash","index","into","merkle_root","nonce","prev_hash","serialize","timestamp","to_owned","try_from","try_into","type_id","validate","vzip","Blockchain","blocks","borrow","borrow_mut","deserialize","difficulty","fmt","from","into","mining_reward","new","pending_txs","serialize","try_from","try_into","type_id","vzip","balance","block","index","mine","tx","BalanceResponse","balance","borrow","borrow_mut","from","get_balance","into","serialize","try_from","try_into","type_id","vzip","get_block","index","NodeResp","add_block","block","borrow","borrow_mut","deserialize","from","get_block","into","miner_reward","serialize","try_from","try_into","type_id","vzip","TxResponse","add_tx","borrow","borrow_mut","deserialize","fmt","from","into","serialize","status","try_from","try_into","type_id","vzip","Tx","amount","borrow","borrow_mut","calculate_hash","clone","clone_into","deserialize","fmt","from","hash","into","receiver","sender","serialize","signature","timestamp","to_owned","try_from","try_into","type_id","validate","vzip"],"q":[[0,"pixelpay"],[5,"pixelpay::block"],[31,"pixelpay::blockchain"],[48,"pixelpay::routes"],[53,"pixelpay::routes::balance"],[65,"pixelpay::routes::block"],[66,"pixelpay::routes::index"],[67,"pixelpay::routes::mine"],[82,"pixelpay::routes::tx"],[96,"pixelpay::tx"]],"d":["","","","","","Represents a block in the blockchain.","","","Calculates the hash of the block based on its properties.","Calculates the Merkle root of the transactions in the …","","","The transactions included in the block.","","The difficulty of mining the block.","","Returns the argument unchanged.","The hash of the block.","The index of the block.","Calls <code>U::from(self)</code>.","The Merkle root of the transactions in the block.","The nonce used in mining the block.","The hash of the previous block.","","The timestamp of the block.","","","","","Validates the block.","","Represents a blockchain.","The blocks in the blockchain.","","","","The difficulty level for mining blocks in the blockchain.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","The reward amount for mining a block in the blockchain.","Creates a new instance of the blockchain with a genesis …","The pending transactions in the blockchain.","","","","","","","","","","","Represents the response for retrieving the balance of an …","The balance of the address.","","","Returns the argument unchanged.","Retrieves the balance of an address from the blockchain.","Calls <code>U::from(self)</code>.","","","","","","Retrieves a block by its hash from the blockchain.","Retrieves the entire blockchain.","Response structure for <code>get_block</code> function.","Adds a validated block to the blockchain.","","","","","Returns the argument unchanged.","Retrieves a new block for mining from the blockchain.","Calls <code>U::from(self)</code>.","","","","","","","Represents the response for adding a transaction.","Adds a transaction to the blockchain.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","The status of the transaction.","","","","","Represents a transaction in the blockchain.","The amount of the transaction.","","","Calculates the hash of the transaction based on its …","","","","","Returns the argument unchanged.","The hash of the transaction.","Calls <code>U::from(self)</code>.","The receiver of the transaction.","The sender of the transaction.","","The signature of the transaction.","The timestamp of the transaction.","","","","","Validates the transaction.",""],"i":[0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,15,15,15,15,0,15,15,15,15,15,15,0,0,0,0,17,17,17,17,17,0,17,17,17,17,17,17,17,0,0,19,19,19,19,19,19,19,19,19,19,19,19,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18],"f":[0,0,[[],1],0,0,0,[[]],[[]],[2,3],[2,3],[2,2],[[]],0,[4,[[5,[2]]]],0,[[2,6],7],[[]],0,0,[[]],0,0,0,[[2,8],5],0,[[]],[[],5],[[],5],[[],9],[2,[[5,[3]]]],[[]],0,0,[[]],[[]],[4,[[5,[10]]]],0,[[10,6],7],[[]],[[]],0,[[],10],0,[[10,8],5],[[],5],[[],5],[[],9],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[[12,[[11,[10]]]],[13,[3]]],14],[[]],[[15,8],5],[[],5],[[],5],[[],9],[[]],[[[12,[[11,[10]]]],[13,[3]]],14],[[[12,[[11,[10]]]]],14],0,[[[12,[[11,[10]]]],[16,[2]]],14],0,[[]],[[]],[4,[[5,[17]]]],[[]],[[[12,[[11,[10]]]]],14],[[]],0,[[17,8],5],[[],5],[[],5],[[],9],[[]],0,[[[12,[[11,[10]]]],[16,[18]]],14],[[]],[[]],[4,[[5,[19]]]],[[19,6],7],[[]],[[]],[[19,8],5],0,[[],5],[[],5],[[],9],[[]],0,0,[[]],[[]],[18,3],[18,18],[[]],[4,[[5,[18]]]],[[18,6],7],[[]],0,[[]],0,0,[[18,8],5],0,0,[[]],[[],5],[[],5],[[],9],[18,[[5,[3]]]],[[]]],"c":[],"p":[[6,"Result"],[3,"Block"],[3,"String"],[8,"Deserializer"],[4,"Result"],[3,"Formatter"],[6,"Result"],[8,"Serializer"],[3,"TypeId"],[3,"Blockchain"],[3,"Mutex"],[3,"Data"],[3,"Path"],[8,"Responder"],[3,"BalanceResponse"],[3,"Json"],[3,"NodeResp"],[3,"Tx"],[3,"TxResponse"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
